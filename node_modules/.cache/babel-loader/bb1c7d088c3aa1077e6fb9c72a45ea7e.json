{"ast":null,"code":"import _slicedToArray from \"/home/burin17/proj/diploma/concept-funder/concept-funder-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/burin17/proj/diploma/concept-funder/concept-funder-ui/src/PayoutRequest.js\";\nimport React, { useState } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { useEffect } from \"react\";\nimport web3 from \"./contract/web3\";\nimport crowdfundPR from './contract/crowdfundPayoutRequest';\nexport default function PayoutRequest({\n  pr,\n  fpId,\n  account,\n  currentUserId\n}) {\n  const _React$useState = React.useState(pr),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        payoutRequest = _React$useState2[0],\n        setPayoutRequest = _React$useState2[1];\n\n  const _React$useState3 = React.useState(false),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        isLoaded = _React$useState4[0],\n        loaded = _React$useState4[1];\n\n  const _React$useState5 = React.useState(false),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        isInvestor = _React$useState6[0],\n        setIsInvestor = _React$useState6[1];\n\n  const _React$useState7 = React.useState(false),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        isApproved = _React$useState8[0],\n        setIsApproved = _React$useState8[1];\n\n  useEffect(() => {\n    setPayoutRequest(pr);\n    loadData();\n  }, [pr]);\n\n  async function loadData() {\n    // isCurrentUser investor\n    await fetch(\"http://localhost:18080/user/isInvestor?fpId=\" + fpId, {\n      method: \"GET\",\n      headers: new Headers({\n        \"Authorization\": sessionStorage.jwtToken\n      })\n    }).then(response => response.json()).then(data => setIsInvestor(data));\n\n    if (isInvestor) {\n      await fetch(\"http://localhost:18080/payout-requests/isApproved?prId=\" + pr.id, {\n        method: \"GET\",\n        headers: new Headers({\n          \"Authorization\": sessionStorage.jwtToken\n        })\n      }).then(response => response.json()).then(data => setIsApproved(data));\n    }\n\n    loaded(true);\n  }\n\n  if (isLoaded === false) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    });\n  }\n\n  async function approve() {\n    const countOfApproves = await crowdfundPR(pr.contractAddress).methods.approve().send({\n      from: account\n    }).then(res => {\n      return parseInt(res.events.Approved.returnValues.countOfApproves);\n    });\n\n    const _pr = await fetch(\"http://localhost:18080/payout-requests/approve?payoutRequestId=\" + pr.id + \"&approverId=\" + currentUserId + \"&countOfApproves=\" + countOfApproves, {\n      method: \"POST\",\n      headers: new Headers({\n        \"Authorization\": sessionStorage.jwtToken\n      })\n    }).then(resp => resp.json());\n\n    setPayoutRequest(_pr);\n  }\n\n  return React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"bg-light m-5 p-3 fpWrapper\",\n    style: {\n      borderRadius: \"15px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"p-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Requested sum: \", payoutRequest.ethAmount), React.createElement(\"div\", {\n    className: \"p-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Intention: \", payoutRequest.intention), React.createElement(\"div\", {\n    className: \"p-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Promised report: \", payoutRequest.reporting), React.createElement(\"div\", {\n    className: \"p-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Due date: \", payoutRequest.achieveBy.substring(0, payoutRequest.achieveBy.indexOf('T'))), React.createElement(\"div\", {\n    className: \"p-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Count of approves: \", payoutRequest.countOfApproves), React.createElement(\"div\", {\n    className: \"p-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Required amount of approves: \", payoutRequest.requiredAmountOfApproves), isInvestor && !isApproved && React.createElement(\"button\", {\n    id: \"startBtn\",\n    type: \"button\",\n    className: \"m-2 btn btn-primary\",\n    onClick: () => approve(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Approve\")));\n}","map":{"version":3,"sources":["/home/burin17/proj/diploma/concept-funder/concept-funder-ui/src/PayoutRequest.js"],"names":["React","useState","useEffect","web3","crowdfundPR","PayoutRequest","pr","fpId","account","currentUserId","payoutRequest","setPayoutRequest","isLoaded","loaded","isInvestor","setIsInvestor","isApproved","setIsApproved","loadData","fetch","method","headers","Headers","sessionStorage","jwtToken","then","response","json","data","id","approve","countOfApproves","contractAddress","methods","send","from","res","parseInt","events","Approved","returnValues","_pr","resp","borderRadius","ethAmount","intention","reporting","achieveBy","substring","indexOf","requiredAmountOfApproves"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {useEffect} from \"react\";\nimport web3 from \"./contract/web3\";\nimport crowdfundPR from './contract/crowdfundPayoutRequest';\n\nexport default function PayoutRequest({pr, fpId, account, currentUserId}) {\n    const [payoutRequest, setPayoutRequest] = React.useState(pr);\n    const [isLoaded, loaded] = React.useState(false);\n    const [isInvestor, setIsInvestor] = React.useState(false);\n    const [isApproved, setIsApproved] = React.useState(false);\n\n    useEffect(() =>{\n        setPayoutRequest(pr);\n        loadData();\n    }, [pr])\n\n    async function loadData() {\n        // isCurrentUser investor\n        await fetch(\"http://localhost:18080/user/isInvestor?fpId=\" + fpId, {\n            method: \"GET\",\n            headers: new Headers({\n                \"Authorization\": sessionStorage.jwtToken\n            })\n        }).then(response => response.json())\n            .then(data => setIsInvestor(data));\n        if (isInvestor) {\n            await fetch(\"http://localhost:18080/payout-requests/isApproved?prId=\" + pr.id, {\n                method: \"GET\",\n                headers: new Headers({\n                    \"Authorization\": sessionStorage.jwtToken\n                })\n            }).then(response => response.json())\n                .then(data => setIsApproved(data));\n        }\n        loaded(true);\n    }\n\n    if (isLoaded === false) {\n        return <div></div>\n    }\n\n    async function approve() {\n        const countOfApproves = await crowdfundPR(pr.contractAddress).methods.approve().send({\n            from: account\n        }).then(res => {\n            return parseInt(res.events.Approved.returnValues.countOfApproves);\n        })\n        const _pr = await fetch(\"http://localhost:18080/payout-requests/approve?payoutRequestId=\" +\n            pr.id + \"&approverId=\" + currentUserId + \"&countOfApproves=\" + countOfApproves, {\n            method: \"POST\",\n            headers: new Headers({\n                \"Authorization\": sessionStorage.jwtToken,\n            }),\n        }).then(resp => resp.json())\n        setPayoutRequest(_pr);\n    }\n\n    return (\n        <li>\n            <div className=\"bg-light m-5 p-3 fpWrapper\" style={{borderRadius: \"15px\"}}>\n                <h3 className=\"p-3\">Requested sum: {payoutRequest.ethAmount}</h3>\n                <div className=\"p-3\">Intention: {payoutRequest.intention}</div>\n                <div className=\"p-3\">Promised report: {payoutRequest.reporting}</div>\n                <div className=\"p-3\">Due date: {payoutRequest.achieveBy.substring(0, payoutRequest.achieveBy.indexOf('T'))}</div>\n                <div className=\"p-3\">Count of approves: {payoutRequest.countOfApproves}</div>\n                <div className=\"p-3\">Required amount of approves: {payoutRequest.requiredAmountOfApproves}</div>\n                {isInvestor && !isApproved &&\n                    <button id=\"startBtn\" type=\"button\" className=\"m-2 btn btn-primary\" onClick={() => approve()}>Approve</button>\n                }\n                {/*<div className=\"p-3\">{pr.countOfApprovers}</div>*/}\n            </div>\n        </li>\n    )\n}"]},"metadata":{},"sourceType":"module"}