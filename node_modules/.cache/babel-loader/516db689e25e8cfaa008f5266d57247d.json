{"ast":null,"code":"import _slicedToArray from \"/home/burin17/proj/diploma/concept-funder/concept-funder-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/burin17/proj/diploma/concept-funder/concept-funder-ui/src/PayoutRequest.js\";\nimport React, { useState } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { useEffect } from \"react\";\nimport web3 from \"./contract/web3\";\nimport crowdfundPR from '../contract/crowdfundPayoutRequest';\nexport default function PayoutRequest({\n  pr,\n  fpId,\n  account\n}) {\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        isLoaded = _React$useState2[0],\n        loaded = _React$useState2[1];\n\n  const _React$useState3 = React.useState(false),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        isInvestor = _React$useState4[0],\n        setIsInvestor = _React$useState4[1];\n\n  const _React$useState5 = React.useState(false),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        isApproved = _React$useState6[0],\n        setIsApproved = _React$useState6[1];\n\n  useEffect(() => {\n    loadData();\n  });\n\n  async function loadData() {\n    // isCurrentUser investor\n    await fetch(\"http://localhost:18080/user/isInvestor?fpId=\" + fpId, {\n      method: \"GET\",\n      headers: new Headers({\n        \"Authorization\": sessionStorage.jwtToken\n      })\n    }).then(response => response.json()).then(data => setIsInvestor(data));\n\n    if (isInvestor) {\n      await fetch(\"http://localhost:18080/payout-requests/isApproved?prId=\" + pr.id, {\n        method: \"GET\",\n        headers: new Headers({\n          \"Authorization\": sessionStorage.jwtToken\n        })\n      }).then(response => response.json()).then(data => setIsApproved(data));\n    }\n\n    loaded(true);\n  }\n\n  if (isLoaded === false) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    });\n  }\n\n  function approve() {\n    crowdfundPR(pr.contractAddress).methods.approve();\n  }\n\n  return React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"bg-light m-5 p-3 fpWrapper\",\n    style: {\n      borderRadius: \"15px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"p-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Requested sum: \", pr.ethAmount), React.createElement(\"div\", {\n    className: \"p-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Intention: \", pr.intention), React.createElement(\"div\", {\n    className: \"p-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Promised report: \", pr.reporting), React.createElement(\"div\", {\n    className: \"p-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Due date: \", pr.achieveBy.substring(0, pr.achieveBy.indexOf('T'))), isInvestor && !isApproved && React.createElement(\"button\", {\n    id: \"startBtn\",\n    type: \"button\",\n    className: \"m-2 btn btn-primary\",\n    onClick: () => approve(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Approve\")));\n}","map":{"version":3,"sources":["/home/burin17/proj/diploma/concept-funder/concept-funder-ui/src/PayoutRequest.js"],"names":["React","useState","useEffect","web3","crowdfundPR","PayoutRequest","pr","fpId","account","isLoaded","loaded","isInvestor","setIsInvestor","isApproved","setIsApproved","loadData","fetch","method","headers","Headers","sessionStorage","jwtToken","then","response","json","data","id","approve","contractAddress","methods","borderRadius","ethAmount","intention","reporting","achieveBy","substring","indexOf"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {useEffect} from \"react\";\nimport web3 from \"./contract/web3\";\nimport crowdfundPR from '../contract/crowdfundPayoutRequest';\n\nexport default function PayoutRequest({pr, fpId, account}) {\n    const [isLoaded, loaded] = React.useState(false);\n    const [isInvestor, setIsInvestor] = React.useState(false);\n    const [isApproved, setIsApproved] = React.useState(false);\n\n    useEffect(() =>{\n        loadData();\n    })\n\n    async function loadData() {\n        // isCurrentUser investor\n        await fetch(\"http://localhost:18080/user/isInvestor?fpId=\" + fpId, {\n            method: \"GET\",\n            headers: new Headers({\n                \"Authorization\": sessionStorage.jwtToken\n            })\n        }).then(response => response.json())\n            .then(data => setIsInvestor(data));\n        if (isInvestor) {\n            await fetch(\"http://localhost:18080/payout-requests/isApproved?prId=\" + pr.id, {\n                method: \"GET\",\n                headers: new Headers({\n                    \"Authorization\": sessionStorage.jwtToken\n                })\n            }).then(response => response.json())\n                .then(data => setIsApproved(data));\n        }\n        loaded(true);\n    }\n\n    if (isLoaded === false) {\n        return <div></div>\n    }\n\n    function approve() {\n        crowdfundPR(pr.contractAddress).methods.approve()\n    }\n\n    return (\n        <li>\n            <div className=\"bg-light m-5 p-3 fpWrapper\" style={{borderRadius: \"15px\"}}>\n                <h3 className=\"p-3\">Requested sum: {pr.ethAmount}</h3>\n                <div className=\"p-3\">Intention: {pr.intention}</div>\n                <div className=\"p-3\">Promised report: {pr.reporting}</div>\n                <div className=\"p-3\">Due date: {pr.achieveBy.substring(0, pr.achieveBy.indexOf('T'))}</div>\n                {isInvestor && !isApproved &&\n                    <button id=\"startBtn\" type=\"button\" className=\"m-2 btn btn-primary\" onClick={() => approve()}>Approve</button>\n                }\n                {/*<div className=\"p-3\">{pr.countOfApprovers}</div>*/}\n            </div>\n        </li>\n    )\n}"]},"metadata":{},"sourceType":"module"}